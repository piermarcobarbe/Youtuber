#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('youtuber:server');
var http = require('http');
var YoutubeMp3Downloader = require("youtube-mp3-downloader");
var urlParser = require("js-video-url-parser");
var fs = require("fs");
const { spawn } = require('child_process');
const which_ffmpeg = spawn('which', ['ffmpeg']);

var YD;

const downloadDir = "./public/mp3";

if(!(fs.existsSync(downloadDir))){
    fs.mkdirSync(downloadDir, { recursive: true });
}

which_ffmpeg.stderr.on('data', function (data) {
    throw new Error("`which ffmpeg` failed. Probably ffmpeg is not installed.");
})

which_ffmpeg.stdout.on('data', function (data) {
    // console.log("which ffmpeg => "+data.toString());
    let ffmpegPath = data.toString();

    // ffmpeg is in format `/usr/bin/ffmpeg\n`
    ffmpegPath = ffmpegPath.slice(0, ffmpegPath.length-1);

    YD = new YoutubeMp3Downloader({
        "ffmpegPath": ffmpegPath,               // Where is the FFmpeg binary located?
        "outputPath": downloadDir,           // Where should the downloaded and encoded files be stored?
        "youtubeVideoQuality": "highest",       // What video quality should be used?
        "queueParallelism": 10,                 // How many parallel downloads/encodes should be started?
        "progressTimeout": 50                   // How long should be the interval of the progress reports
    });

    // console.log(YD);
})

which_ffmpeg.on('close', (code) => {
    console.log(`which ffmpeg exited with code ${code}`);
});



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
console.log("Running on port " + port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);




io.on('connection', function(socket){

    var clientIP = socket.conn.remoteAddress;
    clientIP = clientIP.split(":")[3];
    console.log("Connection from IP " + clientIP);

    socket.on('download', function (videoID) {

        console.log("download " +videoID);

        // var re  = '/*' + videoID + '\.mp3$/';

        // console.log(re);

        // find.file(re, downloadDir, function (files) {
        //     console.log(files)
        // })

        YD.on("error", function(error) {
            console.log(error);
        });

        YD.on("progress", function (progress) {
            socket.emit("progress", progress);
        });

        YD.on("finished", function (err, data) {
            console.log("Finished");
            if(err) {
                socket.emit("mp3Link", null);
                throw err;
            }
            console.log("data", data);

            let fileWithoutExt = data.file;
            fileWithoutExt = fileWithoutExt.split('.mp3');
            fileWithoutExt = fileWithoutExt[0];

            console.log("fwe:", fileWithoutExt);

            let outFile = fileWithoutExt + "-" + data.videoId + ".mp3";
            console.log("outFile:", outFile);

            if(!(fs.existsSync(outFile))){
                fs.renameSync(data.file, outFile);
            }

            let subArrays = outFile.split("./public/");

            console.log(subArrays[1]);

            socket.emit("mp3Link", {
                file : subArrays[1],
                name : data.videoTitle + ".mp3"
            });


        });

        YD.download(videoID);
    });

    socket.on('checkURL', function(str){
        console.log("socket.on checkURL");
        let info = urlParser.parse(str);
        if (info) if(info.id) socket.emit("correctURL", info.id);
    });

    socket.on('disconnect', function(socket){
        console.log("Connection closed: "+ clientIP);
    });


});






/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
